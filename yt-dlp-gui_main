from email import charset
from yt_dlp_gui import Ui_MainWindow

from PyQt5 import QtWidgets
from PyQt5 import QtCore as qtc
from PyQt5 import QtGui as qtg
import os 
import sys
import subprocess

# https://www.youtube.com/watch?v=XXPNpdaK9WA
# https://github.com/yt-dlp/yt-dlp#installation


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        #self.ui.pushButton.clicked.connect(self.on_pushButton_clicked)
        #self.ui.pushButton_2.clicked.connect(self.on_pushButton_2_clicked)
        #self.ui.pushButton_3.clicked.connect(self.on_pushButton_3_clicked)
        #self.ui.pushButton_4.clicked.connect(self.on_pushButton_4_clicked)
        #self.ui.pushButton_5.clicked.connect(self.on_pushButton_5_clicked)
        #self.ui.pushButton_6.clicked.connect(self.on_pushButton_6_clicked)
        #self.ui.pushButton_7.clicked.connect(self.on_pushButton_7_clicked)
        #self.ui.pushButton_8.clicked.connect(self.on_pushButton_8_clicked)
        #self.ui.pushButton_9.clicked.connect(self.on_pushButton_9_clicked)
        #self.ui.pushButton_10.clicked.connect(self.on_pushButton_10_clicked)
        #self.ui.pushButton_11.clicked.connect(self.on_pushButton_11_clicked)
        #self.ui.pushButton_12.clicked.connect(self.on_pushButton_12_clicked)
        #self.ui.pushButton_13.clicked.connect(self.on_pushButton_13_clicked)
        #self.ui.pushButton_14.clicked.connect(self.on_pushButton_14_clicked)
        #self.ui.pushButton_15.clicked.connect(self.on_pushButton_15_clicked)
        #self.ui.pushButton_16.clicked.connect(self.on_pushButton_16_clicked)
        #self.ui.pushButton_17.clicked.connect(self.on_pushButton_17_clicked)
        #self.ui.download_button.clicked.connect(self.download_button_click())

    def url_checker(self):
        # check if the url is valid, whether or not it's a playlist, and format it accordingly
        self.urls = self.ui.url_input.document().toPlainText()

        print(self.urls)

        print('url_checker done')
        return self.urls

    def option_compiler(self):
        # compile the users options into a string
        
        self.output = ""

        #Add user selected path to the output
        self.output_path = self.ui.folder_path_input.text()
        self.output = self.output + "-P " + self.output_path + " "

        #Add user selected format to the output
        filetype = self.ui.filetype_dropdown.currentText()
        if filetype == ".3gp":
            self.output = self.output + "--format 3gp "
        if filetype == ".aac":
            self.output = self.output + "--format aac "
        if filetype == ".flv":
            self.output = self.output + "--format flv "
        if filetype == ".m4a":
            self.output = self.output + "--format m4a "
        if filetype == ".mp3":
            self.output = self.output + "--format mp3 "
        if filetype == ".mp4":
            self.output = self.output + "--format mp4 "
        if filetype == ".ogg":
            self.output = self.output + "--format ogg "
        if filetype == ".wav":
            self.output = self.output + "--format wav "
        if filetype == ".webm":
            self.output = self.output + "--format webm "
        

        print('option_compiler done')
        return self.output

    #def option_checker(self, option):
    #
    #    option = "--check-all-formats"
    #    option = "yt-dlp " + option + " " + self.url_checker()
    #
    #    proc = subprocess.Popen(option, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, bufsize=1, close_fds=True)
    #    proc.wait()
    #    stdout, stderr = proc.communicate()
    
    @qtc.pyqtSlot()
    def on_download_button_clicked(self):
        # download the video

        urls = self.url_checker()
        options = self.option_compiler()
        command = "yt-dlp " + options + urls

        print('Downloading')
        proc = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

        #update progress bar
        for i in proc.stdout:
            if "%" in i: 
                i = i.split("[download]")[1]
                i = i.split("%")[0] 
                i = i.strip(" ")
                #print( "## " + i + " ##")
                self.ui.progressBar.setProperty("value", float(i))
        proc.wait()
        print('Downloaded')

    @qtc.pyqtSlot()
    def on_browse_folder_button_clicked(self):
        # open a file browser to select a folder
        self.download_path = QtWidgets.QFileDialog.getExistingDirectory(None, 'Select download folder:')
        self.ui.folder_path_input.setText(self.download_path)

if __name__ == '__main__':
    app = QtWidgets.QApplication([])
    
    window = MainWindow()
    window.show()

    app.exec_()

